---
// ThemeToggle.astro - Theme switcher component
---

<div class="theme-toggle" role="radiogroup" aria-label="Theme switcher">
  <button 
    class="theme-option" 
    data-theme-option="light"
    role="radio"
    aria-checked="false"
    aria-label="Switch to light mode"
  >
    <span class="theme-icon">‚òÄÔ∏è</span>
    <span class="theme-label">Light</span>
  </button>
  <button 
    class="theme-option" 
    data-theme-option="dark"
    role="radio"
    aria-checked="true"
    aria-label="Switch to dark mode"
  >
    <span class="theme-icon">üåô</span>
    <span class="theme-label">Dark</span>
  </button>
  <div class="theme-indicator" aria-hidden="true"></div>
</div>

<style>
  .theme-toggle {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0;
    padding: 0.3rem;
    border-radius: 999px;
    border: 1px solid var(--surface-border);
    background: var(--surface-soft);
    backdrop-filter: blur(8px);
    box-shadow: 0 2px 8px -4px rgba(15, 23, 42, 0.1);
  }

  .theme-option {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.45rem 0.9rem;
    border: none;
    background: transparent;
    color: var(--text-secondary);
    font-size: 0.85rem;
    font-family: var(--body-font);
    font-weight: 600;
    cursor: pointer;
    border-radius: 999px;
    transition: color 0.3s ease;
    z-index: 2;
  }

  .theme-option[aria-checked="true"] {
    color: var(--text-primary);
    font-weight: 700;
  }

  .theme-icon {
    font-size: 1rem;
    line-height: 1;
    filter: grayscale(0.3);
    transition: filter 0.3s ease;
  }

  .theme-option[aria-checked="true"] .theme-icon {
    filter: grayscale(0);
  }

  .theme-label {
    letter-spacing: 0.03em;
  }

  .theme-indicator {
    position: absolute;
    top: 0.3rem;
    left: 0.3rem;
    width: calc(50% - 0.3rem);
    height: calc(100% - 0.6rem);
    background: linear-gradient(135deg, rgba(56, 189, 248, 0.20), rgba(26, 135, 84, 0.20));
    border: 1px solid var(--accent-electric);
    border-radius: 999px;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
    pointer-events: none;
    box-shadow: 0 2px 8px -2px rgba(56, 189, 248, 0.3);
  }

  /* When dark mode is active, move indicator to the right */
  .theme-toggle:has([data-theme-option="dark"][aria-checked="true"]) .theme-indicator {
    transform: translateX(100%);
  }

  .theme-option:hover {
    color: var(--text-primary);
  }

  .theme-option:hover .theme-icon {
    filter: grayscale(0);
  }

  .theme-option:focus-visible {
    outline: 2px solid var(--accent-electric);
    outline-offset: 2px;
  }

  @media (max-width: 768px) {
    .theme-label {
      display: none;
    }

    .theme-option {
      padding: 0.5rem;
    }

    .theme-icon {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  // Theme toggle functionality - runs on every page
  function initThemeToggle() {
    const toggleContainer = document.querySelector('.theme-toggle');
    if (!toggleContainer) return;

    const options = toggleContainer.querySelectorAll('.theme-option');
    
    // Update UI to match current theme
    function updateToggleUI(theme: string) {
      options.forEach(option => {
        const optionTheme = option.getAttribute('data-theme-option');
        const isActive = optionTheme === theme;
        option.setAttribute('aria-checked', isActive.toString());
      });
    }

    // Handle toggle clicks
    options.forEach(option => {
      option.addEventListener('click', () => {
        const newTheme = option.getAttribute('data-theme-option');
        if (newTheme) {
          // Dispatch custom event that Layout.astro will listen for
          document.dispatchEvent(new CustomEvent('theme-change', { 
            detail: { theme: newTheme } 
          }));
        }
      });
    });

    // Listen for theme changes from other sources
    document.addEventListener('theme-changed', ((e: CustomEvent) => {
      updateToggleUI(e.detail.theme);
    }) as EventListener);

    // Initialize UI on load
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
    updateToggleUI(currentTheme);
  }

  // Initialize on page load
  initThemeToggle();

  // Re-initialize after Astro view transitions (if you add them later)
  document.addEventListener('astro:page-load', initThemeToggle);
</script>

